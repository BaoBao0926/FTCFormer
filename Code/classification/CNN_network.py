import torch
import torch.nn as nn
import torch.nn.functional as F
import math
# import torch.optim as optim
# import torchvision
# import torchvision.transforms as transforms
# from torch.utils.data import DataLoader
import sys
import warnings


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


class CTM(nn.Module):
    def __init__(self, H, W, embed_dim, dim_out, k=5, k_WSN=5, Cmerge=True, FDPC_KNN=True, if_WSN=True):
        super().__init__()
        self.H, self.W = H, W
        self.dim_out = dim_out
        self.conv = nn.Conv2d(in_channels=embed_dim, out_channels=dim_out, kernel_size=3, stride=1, padding=1)
        # self.conv = TokenConv(in_channels=embed_dim, out_channels=dim_out, kernel_size=3, stride=2, padding=1)
        self.norm = nn.LayerNorm(self.dim_out)
        self.k = k
        # new hyper-parameter
        self.Cmerge = Cmerge
        self.FDPC_KNN = FDPC_KNN
        self.if_WSN = if_WSN
        self.k_WSN = k_WSN
        self.score = nn.Linear(self.dim_out, self.dim_out)

        self.projection_k = nn.Linear(embed_dim, embed_dim)
        self.projection_q = nn.Linear(embed_dim, embed_dim)
        self.projection_v = nn.Linear(embed_dim, embed_dim)

        self.BN = nn.BatchNorm2d(dim_out)  # 加入 Batch Normalization,

    def forward(self, x):
        x_input = x     # torch.Size([1, 96, 55, 55])
        x = self.conv(x)    # torch.Size([1, 96, 55, 55])
        B, C, H, W = x.shape
        x = x.view(B, C, H*W).permute(0, 2, 1)
        x = self.norm(x)
        B, N, C = x.shape

        token_score = self.score(x)
        token_weight = token_score.exp()
        cluster_num = self.H * self.W
        idx_cluster, cluster_num = self.cluster_dpc_fknn_WSN(x, cluster_num, self.k, self.k_WSN)

        x = self.Cmerge_tokens(x, idx_cluster, cluster_num, token_weight)   # torch.Size([1, 756, 96])

        K = self.projection_k(x_input.view(B, C, H*W).permute(0, 2, 1))
        Q = self.projection_q(x)
        V = self.projection_v(x_input.view(B, C, H*W).permute(0, 2, 1))


        attn_scores = torch.bmm(Q, K.transpose(1, 2))  # [batch_size, seq_len_A, seq_len_B]
        attn_scores = attn_scores / (C ** 0.5)  # 缩放

        # 计算注意力权重
        attn_weights = F.softmax(attn_scores, dim=-1) + token_weight.mean(-1, keepdim=True).permute(0, 2, 1)
        # 计算上下文向量
        x = torch.bmm(attn_weights, V)  # [batch_size, seq_len_A, dim]


        x = x.view(B, self.H, self.W, C).permute(0,3,1,2)

        x = self.BN(x)

        return x

    # ---------------------- token merging
    def Cmerge_tokens(self, x, idx_cluster, cluster_num, token_weight=None):
        """Merge tokens in the same cluster to a single cluster.
        Implemented by torch.index_add(). Flops: B*N*(C+2)
        Return:
            out_dict (dict): dict for output token information

        Args:
            token_dict (dict): dict for input token information
            idx_cluster (Tensor[B, N]): cluster index of each token.
            cluster_num (int): cluster number
            token_weight (Tensor[B, N, 1]): weight for each token.
        """

        # idx_token = token_dict['idx_token']
        # agg_weight = token_dict['agg_weight']
        B, N, C = x.shape   # [B, N, C]
        idx_token = torch.arange(N)[None, :].repeat(B, 1).to(x.device)
        agg_weight = x.new_ones(B, N, 1)

        B, N, C = x.shape
        if token_weight is None:
            token_weight = x.new_ones(B, N, C)

        idx_batch = torch.arange(B, device=x.device)[:, None]
        idx = idx_cluster + idx_batch * cluster_num

        # token weight + C-weight
        all_weight = token_weight.new_zeros(B * cluster_num, C)
        all_weight.index_add_(dim=0, index=idx.reshape(B * N), source=token_weight.reshape(B * N, C))
        all_weight = all_weight + 1e-6
        norm_weight = token_weight / all_weight[idx]

        token_weight_for_norm = token_weight.mean(-1, keepdim=True)
        all_weight_token = token_weight_for_norm.new_zeros(B * cluster_num, 1)
        all_weight_token.index_add_(dim=0, index=idx.reshape(B * N), source=token_weight_for_norm.reshape(B * N, 1))
        all_weight_token = all_weight_token + 1e-6
        norm_weight_token = token_weight_for_norm / all_weight_token[idx]

        # average token features
        x_merged = x.new_zeros(B * cluster_num, C)
        source = x * norm_weight
        x_merged.index_add_(dim=0, index=idx.reshape(B * N), source=source.reshape(B * N, C).type(x.dtype))
        x_merged = x_merged.reshape(B, cluster_num, C)

        idx_token_new = self.index_points(idx_cluster[..., None], idx_token).squeeze(-1)
        weight_t = self.index_points(norm_weight_token, idx_token)

        agg_weight_new = agg_weight * weight_t
        agg_weight_new / agg_weight_new.max(dim=1, keepdim=True)[0]

        # out_dict = {}
        # out_dict['x'] = x_merged
        # out_dict['token_num'] = cluster_num
        # out_dict['map_size'] = token_dict['map_size']
        # out_dict['init_grid_size'] = token_dict['init_grid_size']
        # out_dict['idx_token'] = idx_token_new
        # out_dict['agg_weight'] = agg_weight_new
        return x_merged

    # ------------------------------ DPC-KNN ------------------
    def cluster_dpc_fknn_WSN(self, x, cluster_num, k=5, k_WSN=5, token_mask=None):
        """
        Fuzzy DPC-KNN + WSN
        """
        with torch.no_grad():
            B, N, C = x.shape
            # Step 1: Compute pairwise distance
            dist_matrix = torch.cdist(x, x) / (C ** 0.5)

            if token_mask is not None:
                token_mask = token_mask > 0
                dist_matrix = dist_matrix * token_mask[:, None, :] + (dist_matrix.max() + 1) * (~token_mask[:, None, :])

            # Step 2: Calculate sparsity factor (phi) and mean distance (omega)
            omega = dist_matrix.mean(dim=(1, 2), keepdim=True)  # Global mean distance
            phi = torch.sqrt(((dist_matrix - omega) ** 2).mean(dim=(1, 2), keepdim=True))  # Std dev

            # Step 3: Calculate membership function μ(i, j) (Definition 1)
            _, nn_indices = torch.topk(-dist_matrix, k=k, dim=-1)  # Nearest neighbors
            batch_indices = torch.arange(B, device=x.device)[:, None, None].expand(B, N, k)
            token_indices = torch.arange(N, device=x.device)[None, :, None].expand(B, N, k)
            # nn_mask[batch_indices, token_indices, nn_indices] = True      # 不需要这个nn_mask可以省内存

            # u
            dist_selected = dist_matrix[batch_indices, token_indices, nn_indices]  # Shape: (B, N, k)
            mu = (torch.exp(- (dist_selected)**2)/ (dist_selected + 1))**2
            mu_non_nn = torch.exp(-(phi * dist_matrix)**2)/ (dist_matrix + 1)**2

            # Step 4: Calculate local density ρ (Definition 2)
            rho_nn = mu.sum(dim=-1) / k  # 最近邻的模糊隶属度贡献
            # rho_non_nn = ((mu * (~nn_mask)).sum(dim=-1) - rho_nn) / (N - k)  # 非最近邻的模糊隶属度贡献
            rho_non_nn = mu_non_nn.sum(-1) / N      # 不是按照原来的公式，但是可以省内存
            rho = rho_nn + rho_non_nn

            if token_mask is not None:
                rho = rho * token_mask  # Mask out invalid tokens

            # Step 5: Compute distance indicator for clustering
            mask = rho[:, None, :] > rho[:, :, None]
            mask = mask.type(x.dtype)
            dist_max = dist_matrix.flatten(1).max(dim=-1)[0][:, None, None]
            dist, index_parent = (dist_matrix * mask + dist_max * (1 - mask)).min(dim=-1)

            # Step 6: Select clustering centers
            score = dist * rho
            _, index_down = torch.topk(score, k=cluster_num, dim=-1)

        
            _, nn_indices = torch.topk(-dist_matrix, k=k_WSN, dim=-1)  # Nearest neighbors
            dist_selected = dist_matrix[batch_indices, token_indices, nn_indices]  # Shape: (B, N, k)
            WSN_score = self.calculate_WSN(dist_selected, dist_matrix, nn_indices, index_down)
            feature_distance_score = self.calculate_feature_distance_score(dist_matrix, index_down)
            final_score = feature_distance_score + 100000*WSN_score

            idx_cluster = final_score.argmax(dim=1)       # torch.Size([10, 128, 7680])
            # make sure cluster center merge to itself  
            idx_batch = torch.arange(B, device=x.device)[:, None].expand(B, cluster_num)     
            idx_tmp = torch.arange(cluster_num, device=x.device)[None, :].expand(B, cluster_num)    # [0,1]->[[0,1,...], [0,1,2...],....]
            idx_cluster[idx_batch.reshape(-1), index_down.reshape(-1)] = idx_tmp.reshape(-1)        
        return idx_cluster, cluster_num

    # ------------------------------help function ------------------------
    def index_points(self, points, idx):
        """Sample features following the index.
        Returns:
            new_points:, indexed points data, [B, S, C]

        Args:
            points: input points data, [B, N, C]
            idx: sample index data, [B, S]
        """
        device = points.device
        B = points.shape[0]
        view_shape = list(idx.shape)
        view_shape[1:] = [1] * (len(view_shape) - 1)
        repeat_shape = list(idx.shape)
        repeat_shape[0] = 1
        batch_indices = torch.arange(B, dtype=torch.long).to(device).view(view_shape).repeat(repeat_shape)
        new_points = points[batch_indices, idx, :]
        return new_points

    def get_neighbor_mask(self, h, w, k):
        """
        生成二维图片每个token的周围k个邻居的掩码矩阵，包括对角线的邻居。
        Args:
            h: 图片的高度
            w: 图片的宽度
            k: 邻居的半径（欧几里得距离，包含对角线）

        Returns:
            neighbor_mask: Tensor [N, N], 每个位置表示是否是邻居
        """
        N = h * w
        coords = torch.arange(N).view(h, w)  # 生成二维坐标索引
        # coords_flat = coords.flatten()  # 展平为一维

        # 获取二维坐标
        x = torch.arange(h).view(-1, 1).repeat(1, w).flatten()
        y = torch.arange(w).repeat(h).flatten()

        # 计算所有点之间的欧几里得距离
        euclidean_dist = ((x.unsqueeze(1) - x.unsqueeze(0)) ** 2 + (y.unsqueeze(1) - y.unsqueeze(0)) ** 2).sqrt()

        # 生成邻居掩码矩阵
        neighbor_mask = euclidean_dist <= k
        return neighbor_mask

    def calculate_WSN(self, dist_selected, dist_matrix, nn_indices, index_down):
        W = (1 / (dist_selected + 1)).sum(dim=-1)  # Shape: (B, N)  把单独能的，换成上面用过的dist_selected，即只有knn的距离
        W = W.unsqueeze(-1) + W.unsqueeze(-2)  # [优化] 避免 `W[:, :, None] + W[:, None, :]` 造成大规模广播
    
        knn_mask = torch.zeros_like(dist_matrix).scatter_(2, nn_indices, 1)  # in-place scatter operation
        # Calculate shared neighbors in-place to save memory
        snn = knn_mask @ knn_mask.transpose(1, 2)

        WSN = snn * W
        WSN = self.index_points(WSN, index_down)
        return WSN
    
    def calculate_feature_distance_score(self, dist_matrix, index_down):
        dist_matrix = self.index_points(dist_matrix, index_down)
        return -dist_matrix

   
# ------------------------------------------------ AlexNet -------------------------------------- add BatchNormalization
class AlexNet_FCTM(nn.Module):
    def __init__(self, num_classes=1000, in_chan=3):
        super(AlexNet_FCTM, self).__init__()
        self.features1 = nn.Sequential(
            nn.Conv2d(in_chan, 96, kernel_size=11, stride=4, padding=2),  # [224x224x3] -> [55x55x96]
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(96),  # add Batch Normalization
        )
        # self.downsample1 = nn.MaxPool2d(kernel_size=3, stride=2),                   # -> [27x27x96]
        self.downsample1 = CTM(H=27, W=27, embed_dim=96, dim_out=96)
            
        self.features2 = nn.Sequential(
            nn.Conv2d(96, 256, kernel_size=5, padding=2),           # -> [27x27x256]
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(256),  # add Batch Normalization
        )
         
        # self.downsample2 = nn.MaxPool2d(kernel_size=3, stride=2),                   # -> [13x13x256]
        self.downsample2 = CTM(H=13, W=13, embed_dim=256, dim_out=256)                   # -> [13x13x256]

        self.features3 = nn.Sequential(   
            nn.Conv2d(256, 384, kernel_size=3, padding=1),          # -> [13x13x384]
            nn.BatchNorm2d(384),  # add Batch Normalization
            nn.ReLU(inplace=True),
            
            nn.Conv2d(384, 384, kernel_size=3, padding=1),          # -> [13x13x384]
            nn.BatchNorm2d(384),  # add Batch Normalization
            nn.ReLU(inplace=True),
            
            nn.Conv2d(384, 256, kernel_size=3, padding=1),          # -> [13x13x256]
            nn.BatchNorm2d(256),  # add Batch Normalization
            nn.ReLU(inplace=True)
        )
        
        # self.downsample3 = nn.MaxPool2d(kernel_size=3, stride=2),                  # -> [6x6x256]
        self.downsample3 = CTM(H=6, W=6, embed_dim=256, dim_out=256)
        
        self.classifier = nn.Sequential(
            nn.Dropout(p=0.5),
            nn.Linear(256 * 6 * 6, 4096),
            nn.ReLU(inplace=True),
            
            nn.Dropout(p=0.5),
            nn.Linear(4096, 4096),
            nn.ReLU(inplace=True),
            
            nn.Linear(4096, num_classes),
        )

        self.apply(self._init_weights)

    def forward(self, x):
        x = self.downsample1(self.features1(x))
        x = self.downsample2(self.features2(x))
        x = self.downsample3(self.features3(x))
        x = torch.flatten(x, 1) 
        x = self.classifier(x)
        return x

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.Conv2d):
            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
            fan_out //= m.groups
            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))
            if m.bias is not None:
                m.bias.data.zero_()
    
class AlexNet(nn.Module):
    def __init__(self, num_classes=1000, in_chan=3):
        super(AlexNet, self).__init__()
        self.features = nn.Sequential(
            nn.Conv2d(in_chan, 96, kernel_size=11, stride=4, padding=2),  # [224x224x3] -> [55x55x96]
            nn.BatchNorm2d(96),  # add Batch Normalization,
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2),                   # -> [27x27x96]
            
            nn.Conv2d(96, 256, kernel_size=5, padding=2),           # -> [27x27x256]
            nn.BatchNorm2d(256),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2),                   # -> [13x13x256]
            
            nn.Conv2d(256, 384, kernel_size=3, padding=1),          # -> [13x13x384]
            nn.BatchNorm2d(384),  # add Batch Normalization
            nn.ReLU(inplace=True),
            
            nn.Conv2d(384, 384, kernel_size=3, padding=1),          # -> [13x13x384]
            nn.BatchNorm2d(384),  # add Batch Normalization
            nn.ReLU(inplace=True),
            
            nn.Conv2d(384, 256, kernel_size=3, padding=1),          # -> [13x13x256]
            nn.BatchNorm2d(256),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2),                  # -> [6x6x256]
        )
        self.classifier = nn.Sequential(
            nn.Dropout(p=0.5),
            nn.Linear(256 * 6 * 6, 4096),
            nn.ReLU(inplace=True),
            
            nn.Dropout(p=0.5),
            nn.Linear(4096, 4096),
            nn.ReLU(inplace=True),
            
            nn.Linear(4096, num_classes),
        )

        self.apply(self._init_weights)

    def forward(self, x):
        x = self.features(x)
        x = torch.flatten(x, 1) 
        x = self.classifier(x)
        return x
 
    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.Conv2d):
            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
            fan_out //= m.groups
            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))
            if m.bias is not None:
                m.bias.data.zero_()


# ------------------------------------------------ VGG19 ---------------------------------------
class VGG19(nn.Module):
    def __init__(self, num_classes=1000, in_chan=3):
        super(VGG19, self).__init__()
        
        self.features = nn.Sequential(
            # Block 1:
            nn.Conv2d(in_chan, 64, kernel_size=3, padding=1),  # [224x224x3] -> [224x224x64]
            nn.BatchNorm2d(64),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, kernel_size=3, padding=1),  # [224x224x64] -> [224x224x64]
            nn.BatchNorm2d(64),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),  # [224x224x64] -> [112x112x64]
            # Block 2:
            nn.Conv2d(64, 128, kernel_size=3, padding=1),  # [112x112x64] -> [112x112x128]
            nn.BatchNorm2d(128),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(128, 128, kernel_size=3, padding=1),  # [112x112x128] -> [112x112x128]
            nn.BatchNorm2d(128),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),  # [112x112x128] -> [56x56x128]
            # Block 3:
            nn.Conv2d(128, 256, kernel_size=3, padding=1),  # [56x56x128] -> [56x56x256]
            nn.BatchNorm2d(256),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, kernel_size=3, padding=1),  # [56x56x256] -> [56x56x256]
            nn.BatchNorm2d(256),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, kernel_size=3, padding=1),  # [56x56x256] -> [56x56x256]
            nn.BatchNorm2d(256),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, kernel_size=3, padding=1),  # [56x56x256] -> [56x56x256]
            nn.BatchNorm2d(256),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),  # [56x56x256] -> [28x28x256]

            # Block 4:
            nn.Conv2d(256, 512, kernel_size=3, padding=1),  # [28x28x256] -> [28x28x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [28x28x512] -> [28x28x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [28x28x512] -> [28x28x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [28x28x512] -> [28x28x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),  # [28x28x512] -> [14x14x512]

            # Block 5:
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [14x14x512] -> [14x14x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [14x14x512] -> [14x14x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [14x14x512] -> [14x14x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [14x14x512] -> [14x14x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),  # [14x14x512] -> [7x7x512]
        )
        
        # ----------------- Fully connected layer -----------------
        self.classifier = nn.Sequential(
            nn.Linear(512 * 7 * 7, 4096),  
            nn.BatchNorm1d(4096),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Dropout(p=0.5),  # Dropout
            nn.Linear(4096, 4096),
            nn.BatchNorm1d(4096),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Dropout(p=0.5),
            nn.Linear(4096, num_classes), 
        )

    def forward(self, x):
        x = self.features(x)  # [B,3,224,224] -> [B,512,7,7]
        x = torch.flatten(x, 1)  # [B,512,7,7] -> [B,512*7*7]
        x = self.classifier(x)  # [B,512*7*7] -> [B,num_classes]
        return x

class VGG19_FCTM(nn.Module):
    def __init__(self, num_classes=1000, in_chan=3):
        super(VGG19_FCTM, self).__init__()
        
        self.features = nn.Sequential(
            # Block 1: 
            nn.Conv2d(in_chan, 64, kernel_size=3, padding=1),  # [224x224x3] -> [224x224x64]
            nn.BatchNorm2d(64),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, kernel_size=3, padding=1),  # [224x224x64] -> [224x224x64]
            nn.BatchNorm2d(64),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),  # [224x224x64] -> [112x112x64]

            # Block 2:
            nn.Conv2d(64, 128, kernel_size=3, padding=1),  # [112x112x64] -> [112x112x128]
            nn.BatchNorm2d(128),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(128, 128, kernel_size=3, padding=1),  # [112x112x128] -> [112x112x128]
            nn.BatchNorm2d(128),  # add Batch Normalization
            nn.ReLU(inplace=True),
            # nn.MaxPool2d(kernel_size=2, stride=2),  # [112x112x128] -> [56x56x128]
            CTM(H=56, W=56, embed_dim=128, dim_out=128),

            # Block 3: 
            nn.Conv2d(128, 256, kernel_size=3, padding=1),  # [56x56x128] -> [56x56x256]
            nn.BatchNorm2d(256),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, kernel_size=3, padding=1),  # [56x56x256] -> [56x56x256]
            nn.BatchNorm2d(256),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, kernel_size=3, padding=1),  # [56x56x256] -> [56x56x256]
            nn.BatchNorm2d(256),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, kernel_size=3, padding=1),  # [56x56x256] -> [56x56x256]
            nn.BatchNorm2d(256),  # add Batch Normalization
            nn.ReLU(inplace=True),
            # nn.MaxPool2d(kernel_size=2, stride=2),  # [56x56x256] -> [28x28x256]
            CTM(H=28, W=28, embed_dim=256, dim_out=256),

            # Block 4: 
            nn.Conv2d(256, 512, kernel_size=3, padding=1),  # [28x28x256] -> [28x28x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [28x28x512] -> [28x28x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [28x28x512] -> [28x28x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [28x28x512] -> [28x28x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            # nn.MaxPool2d(kernel_size=2, stride=2),  # [28x28x512] -> [14x14x512]
            CTM(H=14, W=14, embed_dim=512, dim_out=512),

            # Block 5: 
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [14x14x512] -> [14x14x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [14x14x512] -> [14x14x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [14x14x512] -> [14x14x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, padding=1),  # [14x14x512] -> [14x14x512]
            nn.BatchNorm2d(512),  # add Batch Normalization
            nn.ReLU(inplace=True),
            # nn.MaxPool2d(kernel_size=2, stride=2),  # [14x14x512] -> [7x7x512]
            CTM(H=7, W=7, embed_dim=512, dim_out=512),
        )
        
        # ----------------- fully connected layers -----------------
        self.classifier = nn.Sequential(
            nn.Linear(512 * 7 * 7, 4096), 
            nn.BatchNorm1d(4096),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Dropout(p=0.5),  # Dropout 
            nn.Linear(4096, 4096),
            nn.BatchNorm1d(4096),  # add Batch Normalization
            nn.ReLU(inplace=True),
            nn.Dropout(p=0.5),
            nn.Linear(4096, num_classes),  
        )

    def forward(self, x):
        x = self.features(x)  # [B,3,224,224] -> [B,512,7,7]
        x = torch.flatten(x, 1)  # [B,512,7,7] -> [B,512*7*7]
        x = self.classifier(x)  # [B,512*7*7] -> [B,num_classes]
        return x



# -------------------------------------------------- ResNet18 ---------------------------------
class BasicBlock(nn.Module):
    """ResNet fundational block"""
    expansion = 1  
    def __init__(self, in_channels, out_channels):
        super(BasicBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU(inplace=True)
        
        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(out_channels)

    def forward(self, x):
        identity = x  # resudial conntection
        
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        
        out = self.conv2(out)
        out = self.bn2(out)

        out += identity  
        out = self.relu(out)
        return out


class ResNet18(nn.Module):
    def __init__(self, num_classes=1000, in_chan=3):
        super(ResNet18, self).__init__()
        
        # ----------------- initial CNN -----------------
        self.conv1 = nn.Conv2d(in_chan, 64, kernel_size=7, stride=2, padding=3, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        
        # ----------------- Stage 1 (output size: 56x56) -----------------
        # Block 1 (downsample)
        self.layer1_block1 = BasicBlock(64, 64)
        # Block 2
        self.layer1_block2 = BasicBlock(64, 64)
        
        # ----------------- Stage 2 (output size: 28x28) -----------------
        # Block 1 (downsample)
        self.downsampling = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=2, padding=1)
        self.layer2_block1 = BasicBlock(128, 128)
        # Block 2
        self.layer2_block2 = BasicBlock(128, 128)
        
        # ----------------- Stage 3 (output size: 14x14) -----------------
        # Block 1 (downsample)
        self.downsampling2 =  nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, stride=2, padding=1)
        self.layer3_block1 = BasicBlock(256, 256)
        # Block 2
        self.layer3_block2 = BasicBlock(256, 256)
        
        # ----------------- Stage 4 (output size: 7x7) -----------------
        # Block 1 (downsample)
        self.downsampling3 = nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, stride=2, padding=1)
        self.layer4_block1 = BasicBlock(512, 512)
        # Block 2
        self.layer4_block2 = BasicBlock(512, 512)
        
        # ----------------- prediction head -----------------
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512, num_classes)

        self.apply(self._init_weights)

    def forward(self, x):
        # initial CNN
        x = self.conv1(x)       # [B,3,224,224] -> [B,64,112,112]
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)     # [B,64,112,112] -> [B,64,56,56]
        
        # Stage 1
        x = self.layer1_block1(x)  # [B,64,56,56] -> [B,64,56,56]
        x = self.layer1_block2(x)  # [B,64,56,56] -> [B,64,56,56]
        x = self.downsampling(x)
        # Stage 2
        x = self.layer2_block1(x)  # [B,64,56,56] -> [B,128,28,28]
        x = self.layer2_block2(x)  # [B,128,28,28] -> [B,128,28,28]
        x = self.downsampling2(x)
        # Stage 3
        x = self.layer3_block1(x)  # [B,128,28,28] -> [B,256,14,14]
        x = self.layer3_block2(x)  # [B,256,14,14] -> [B,256,14,14]
        x = self.downsampling3(x)
        # Stage 4
        x = self.layer4_block1(x)  # [B,256,14,14] -> [B,512,7,7]
        x = self.layer4_block2(x)  # [B,512,7,7] -> [B,512,7,7]
        
        # prediction head
        x = self.avgpool(x)       # [B,512,7,7] -> [B,512,1,1]
        x = torch.flatten(x, 1)  # [B,512]
        x = self.fc(x)           # [B,512] -> [B,num_classes]
        return x

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.Conv2d):
            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
            fan_out //= m.groups
            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))
            if m.bias is not None:
                m.bias.data.zero_()


class ResNet18_FTCM(nn.Module):
    def __init__(self, num_classes=1000, in_chan=3):
        super(ResNet18_FTCM, self).__init__()
        
        # ----------------- initial CNN -----------------
        self.conv1 = nn.Conv2d(in_chan, 64, kernel_size=7, stride=2, padding=3, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        
        # ----------------- Stage 1 (output size: 56x56) -----------------
        # Block 1 (no downsample)
        self.layer1_block1 = BasicBlock(64, 64)
        # Block 2
        self.layer1_block2 = BasicBlock(64, 64)
        
        # ----------------- Stage 2 (output size: 28x28) -----------------
        # Block 1 (downsample)
        # self.downsampling = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=2, padding=1)
        self.downsampling = nn.Sequential(
            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=1, stride=1),
            CTM(H=28, W=28, embed_dim=128, dim_out=128)
        )
        
        self.layer2_block1 = BasicBlock(128, 128)
        # Block 2
        self.layer2_block2 = BasicBlock(128, 128)
        
        # ----------------- Stage 3 (output size: 14x14) -----------------
        # Block 1 (downsample)
        # self.downsampling2 =  nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, stride=2, padding=1)
        self.downsampling2 = nn.Sequential(
            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=1, stride=1),
            CTM(H=14, W=14, embed_dim=256, dim_out=256)
        )
        self.layer3_block1 = BasicBlock(256, 256)
        # Block 2
        self.layer3_block2 = BasicBlock(256, 256)
        
        # ----------------- Stage 4 (output size: 7x7) -----------------
        # Block 1 (downsample)
        # self.downsampling3 = nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, stride=2, padding=1)
        self.downsampling3 = nn.Sequential(
            nn.Conv2d(in_channels=256, out_channels=512, kernel_size=1, stride=1),
            CTM(H=7, W=7, embed_dim=512, dim_out=512)
        )
        self.layer4_block1 = BasicBlock(512, 512)
        # Block 2
        self.layer4_block2 = BasicBlock(512, 512)
        
        # ----------------- prediction head -----------------
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512, num_classes)

        self.apply(self._init_weights)

    def forward(self, x):
        # initial CNN
        x = self.conv1(x)       # [B,3,224,224] -> [B,64,112,112]
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)     # [B,64,112,112] -> [B,64,56,56]
        
        # Stage 1
        x = self.layer1_block1(x)  # [B,64,56,56] -> [B,64,56,56]
        x = self.layer1_block2(x)  # [B,64,56,56] -> [B,64,56,56]
        x = self.downsampling(x)
        
        # Stage 2
        x = self.layer2_block1(x)  # [B,64,56,56] -> [B,128,28,28]
        x = self.layer2_block2(x)  # [B,128,28,28] -> [B,128,28,28]
        x = self.downsampling2(x)
        
        # Stage 3
        x = self.layer3_block1(x)  # [B,128,28,28] -> [B,256,14,14]
        x = self.layer3_block2(x)  # [B,256,14,14] -> [B,256,14,14]
        x = self.downsampling3(x)
        # Stage 4
        x = self.layer4_block1(x)  # [B,256,14,14] -> [B,512,7,7]
        x = self.layer4_block2(x)  # [B,512,7,7] -> [B,512,7,7]
        # prediction head
        x = self.avgpool(x)       # [B,512,7,7] -> [B,512,1,1]
        x = torch.flatten(x, 1)  # [B,512]
        x = self.fc(x)           # [B,512] -> [B,num_classes]
        return x

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.Conv2d):
            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
            fan_out //= m.groups
            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))
            if m.bias is not None:
                m.bias.data.zero_()


# --------------------------------------------  ResNeXt-18 ------------------------------
# define ResNeXt foundation block
class ResNeXtBlock(nn.Module):
    def __init__(self, in_channels, out_channels, stride=1, cardinality=32, if_FCTM=False, H=1, W=1):
        """
        Args:
            in_channels: input channel
            out_channels: output channel
            stride: stride
            cardinality: group
        """
        super(ResNeXtBlock, self).__init__()
        self.cardinality = cardinality
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, bias=False)
        self.bn1 = nn.BatchNorm2d(out_channels)
        
        # gourp CNN
        self.conv2 = nn.Conv2d(
            out_channels, out_channels, kernel_size=3, stride=stride, padding=1,
            groups=cardinality, bias=False
        )
        self.bn2 = nn.BatchNorm2d(out_channels)
        
        self.conv3 = nn.Conv2d(out_channels, out_channels, kernel_size=1, stride=1, bias=False)
        self.bn3 = nn.BatchNorm2d(out_channels)
        
        # maxpooling
        self.downsample = None
        if stride != 1 or in_channels != out_channels * 2:
            if not if_FCTM:
                self.downsample = nn.Sequential(
                    nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=stride, bias=False),
                    nn.BatchNorm2d(out_channels),
                )
            else:
                self.downsample = nn.Sequential(
                    nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=1, stride=1),
                    CTM(H=H, W=W, embed_dim=out_channels, dim_out=out_channels)
                )
                
                
        
        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        identity = x  # for resudial connection

        out = self.conv1(x)

        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        return out


# define ResNeXt-18
class ResNeXt18(nn.Module):
    def __init__(self, num_classes=1000, cardinality=32, in_chan=3):
        super(ResNeXt18, self).__init__()
        self.cardinality = cardinality

        # initial (downsample 1）
        self.conv1 = nn.Conv2d(in_chan, 64, kernel_size=7, stride=2, padding=3, bias=False)  
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        
        # Maxpooling layer（downsample 2）
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)  

        # ResNeXt, four stages
        self.layer1 = self._make_layer(64, 64, stride=1, num_blocks=2)
        self.layer2 = self._make_layer(64, 128, stride=2, num_blocks=2)   # downsample 3
        self.layer3 = self._make_layer(128, 256, stride=2, num_blocks=2)  # downsample 4
        self.layer4 = self._make_layer(256, 512, stride=2, num_blocks=2)  # downsample 5

        # avgpooling and fully connected layer
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512, num_classes)

    def _make_layer(self, in_channels, out_channels, stride, num_blocks):
        layers = []
        layers.append(ResNeXtBlock(in_channels, out_channels, stride, self.cardinality))  # downsample
        for _ in range(1, num_blocks):
            layers.append(ResNeXtBlock(out_channels, out_channels, stride=1, cardinality=self.cardinality))
        return nn.Sequential(*layers)

    def forward(self, x):
        # input: [2, 3, 224, 224]
        x = self.conv1(x)  # [2, 64, 112, 112] 
        x = self.bn1(x)    # [2, 64, 112, 112]
        x = self.relu(x)   # [2, 64, 112, 112]
        x = self.maxpool(x)  # [2, 64, 56, 56] 
        # stage 1: layer1
        x = self.layer1(x)  # [2, 128, 56, 56] 
        print(f'x1 {x.shape}')
        # print(f'xxx {x.shape}')
        # sys.exit(0)
        # stage2: layer2
        x = self.layer2(x)  # [2, 256, 28, 28]
        print(f'x2 {x.shape}')
        # stage3: layer3
        x = self.layer3(x)  # [2, 512, 14, 14] 
        # stage4: layer4
        x = self.layer4(x)  # [2, 1024, 7, 7] 
        # avgpooling
        x = self.avgpool(x)  # [2, 1024, 1, 1] 
        # flatten
        x = torch.flatten(x, 1)  # [2, 1024]
        # fully connected layers
        x = self.fc(x)  # [2, 1000] 
        
        return x

class ResNeXt18_FCTM(nn.Module):
    def __init__(self, num_classes=1000, cardinality=32, in_chan=3):
        super(ResNeXt18_FCTM, self).__init__()
        self.cardinality = cardinality

        self.conv1 = nn.Conv2d(in_chan, 64, kernel_size=7, stride=2, padding=3, bias=False)  
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1) 
        # ResNeXt 4 stages
        self.layer1 = self._make_layer(64, 64, stride=1, num_blocks=2, if_CTM=False)
        self.layer2 = self._make_layer(64, 128, stride=2, num_blocks=2, if_CTM=True, H=28, W=28)    
        self.layer3 = self._make_layer(128, 256, stride=2, num_blocks=2, if_CTM=True, H=14, W=14)  
        self.layer4 = self._make_layer(256, 512, stride=2, num_blocks=2, if_CTM=True, H=7, W=7)   

        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512, num_classes)

    def _make_layer(self, in_channels, out_channels, stride, num_blocks, if_CTM=False, H=0, W=0):
        layers = []
        layers.append(ResNeXtBlock(in_channels, out_channels, stride, self.cardinality, if_FCTM=if_CTM, H=H, W=W))  

        for _ in range(1, num_blocks):
            layers.append(ResNeXtBlock(out_channels, out_channels, stride=1, cardinality=self.cardinality))
        return nn.Sequential(*layers)

    def forward(self, x):
        # input: [2, 3, 224, 224]
        x = self.conv1(x)  # [2, 64, 112, 112] 
        x = self.bn1(x)    # [2, 64, 112, 112]
        x = self.relu(x)   # [2, 64, 112, 112]
        x = self.maxpool(x)  # [2, 64, 56, 56] 

        # stage 1: layer1
        x = self.layer1(x)  # [2, 128, 56, 56] 
        # stage 2: layer2
        x = self.layer2(x)  # [2, 256, 28, 28] 
        # stage 3: layer3
        x = self.layer3(x)  # [2, 512, 14, 14] 
        # stage 4: layer4
        x = self.layer4(x)  # [2, 1024, 7, 7] 
        # avgpooling
        x = self.avgpool(x)  # [2, 1024, 1, 1] 
        x = torch.flatten(x, 1)  # [2, 1024]
        x = self.fc(x)  # [2, 1000] 
        
        return x



# ----------------------------------------- ResNeXt-18-maxpooling --------------------------

class ResNeXtBlock_maxpooling(nn.Module):
    def __init__(self, in_channels, out_channels, stride=1, cardinality=32, if_FCTM=False, H=1, W=1):
        """
        Args:
            in_channels: input channle
            out_channels: output channel
            stride: stride
            cardinality: group number
        """
        super(ResNeXtBlock_maxpooling, self).__init__()
        self.cardinality = cardinality
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, bias=False)
        self.bn1 = nn.BatchNorm2d(out_channels)
        
        # group CNN
        self.conv2 = nn.Conv2d(
            out_channels, out_channels, kernel_size=3, stride=1, padding=1,
            groups=cardinality, bias=False
        )
        self.bn2 = nn.BatchNorm2d(out_channels)
        
        self.conv3 = nn.Conv2d(out_channels, out_channels, kernel_size=1, stride=1, bias=False)
        self.bn3 = nn.BatchNorm2d(out_channels)
        
        # downsample layer
        self.downsample = None
        if stride != 1 or in_channels != out_channels * 2:
            if not if_FCTM:
                self.downsample = nn.Sequential(
                    nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=stride, bias=False),
                    nn.BatchNorm2d(out_channels),
                )
            else:
                self.downsample = CTM(H=H, W=W, embed_dim=in_channels, dim_out=out_channels)
        
        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        identity = x  

        out = self.conv1(x)

        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        out += identity

        if self.downsample is not None:
            identity = self.downsample(x)

        out = self.relu(out)

        return out


class ResNeXt18_maxpooling(nn.Module):
    def __init__(self, num_classes=1000, cardinality=32, in_chan=3):
        super(ResNeXt18_maxpooling, self).__init__()
        self.cardinality = cardinality

        # initial CNN
        self.conv1 = nn.Conv2d(in_chan, 64, kernel_size=7, stride=2, padding=3, bias=False)  
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        # Maxpooling
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)  

        # ResNeXt 4 stages 
        self.layer1 = self._make_layer(64, 64, stride=1, num_blocks=2)
        self.layer2 = self._make_layer(64, 128, stride=2, num_blocks=2) 
        self.layer3 = self._make_layer(128, 256, stride=2, num_blocks=2)  
        self.layer4 = self._make_layer(256, 512, stride=2, num_blocks=2)  

        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512, num_classes)

    def _make_layer(self, in_channels, out_channels, stride, num_blocks):
        layers = []
        layers.append(ResNeXtBlock_maxpooling(in_channels, out_channels, stride, self.cardinality))  

        for _ in range(1, num_blocks):
            layers.append(ResNeXtBlock_maxpooling(out_channels, out_channels, stride=1, cardinality=self.cardinality))
        return nn.Sequential(*layers)

    def forward(self, x):
        # input: [2, 3, 224, 224]
        x = self.conv1(x)  # [2, 64, 112, 112] 
        x = self.bn1(x)    # [2, 64, 112, 112]
        x = self.relu(x)   # [2, 64, 112, 112]
        x = self.maxpool(x)  # [2, 64, 56, 56] 
        # stage 1: layer1
        x = self.layer1(x)  # [2, 128, 56, 56] 
        # stage 2: layer2
        x = self.layer2(x)  # [2, 256, 28, 28] 
        # stage 3: layer3
        x = self.layer3(x)  # [2, 512, 14, 14] 
        # stage 4: layer4
        x = self.layer4(x)  # [2, 1024, 7, 7] 
        # avgpooling
        x = self.avgpool(x)  # [2, 1024, 1, 1]
        x = torch.flatten(x, 1)  # [2, 1024] 
        x = self.fc(x)  # [2, 1000] 
        
        return x

class ResNeXt18_maxpooling_FCTM(nn.Module):
    def __init__(self, num_classes=1000, cardinality=32, in_chan=3):
        super(ResNeXt18_maxpooling_FCTM, self).__init__()
        self.cardinality = cardinality

        # initial CNNs
        self.conv1 = nn.Conv2d(in_chan, 64, kernel_size=7, stride=2, padding=3, bias=False)  
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        
        # maxpooling
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)  

        # ResNeXt stage 4
        self.layer1 = self._make_layer(64, 64, stride=1, num_blocks=2, if_CTM=False)
        self.layer2 = self._make_layer(64, 128, stride=2, num_blocks=2, if_CTM=True, H=28, W=28) 
        self.layer3 = self._make_layer(128, 256, stride=2, num_blocks=2, if_CTM=True, H=14, W=14) 
        self.layer4 = self._make_layer(256, 512, stride=2, num_blocks=2, if_CTM=True, H=7, W=7)  

        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512, num_classes)

    def _make_layer(self, in_channels, out_channels, stride, num_blocks, if_CTM=False, H=0, W=0):
        layers = []
        layers.append(ResNeXtBlock_maxpooling(in_channels, out_channels, stride, self.cardinality))  

        for _ in range(1, num_blocks):
            layers.append(ResNeXtBlock_maxpooling(out_channels, out_channels, stride=1, cardinality=self.cardinality))
        return nn.Sequential(*layers)

    def forward(self, x):
        # input: [2, 3, 224, 224]
        x = self.conv1(x)  # [2, 64, 112, 112] 
        x = self.bn1(x)    # [2, 64, 112, 112]
        x = self.relu(x)   # [2, 64, 112, 112]
        x = self.maxpool(x)  # [2, 64, 56, 56] 

        # stgae 1: layer1
        x = self.layer1(x)  # [2, 128, 56, 56]
        # stgae 2: layer2
        x = self.layer2(x)  # [2, 256, 28, 28] 
        # stgae 3: layer3
        x = self.layer3(x)  # [2, 512, 14, 14]
        # stgae 4: layer4
        x = self.layer4(x)  # [2, 1024, 7, 7]
        # avgpooling
        x = self.avgpool(x)  # [2, 1024, 1, 1] 
        
        # flatten
        x = torch.flatten(x, 1)  # [2, 1024] 
        
        # fully connected layer
        x = self.fc(x)  # [2, 1000] 
        
        return x


if __name__ == '__main__':
    X = torch.randn(3, 3, 224, 224)
    # mm = AlexNet_FCTM(num_classes=10, in_chan=3)
    # mm = ResNet18(num_classes=10, in_chan=3)
    # mm = VGG19_FCTM(num_classes=10, in_chan=3)
    # mm = ResNeXt18(num_classes=10, in_chan=3)
    mm = ResNeXt18_FCTM(num_classes=10, in_chan=3)
    # mm = ResNeXt18_maxpooling_FCTM(num_classes=10, in_chan=3)
    X = mm(X)
    print(X)
    print(X.shape)
